@startmindmap
title Источник \n https://vc.ru/life/155337-kak-nauchitsya-pravilno-stavit-zadachi-razrabotchikam-i-uskorit-processy-v-2-raza

* <b>Cтандарт описания задачи</b>

**:<b>Аспекты задачи</b>
Заказчику необходимо описать
;

***:<b>Требование</b>
Для точного определения, что требуется сделать
в постановке задачи используется принцип
<b>SMART</b>
;

****:<b>Specifiс</b>
Задача должна быть конкретной.
Куда мы пойдем, чего мы хотим достичь?
;

****:<b>Measurable</b>
В чем должен измеряться результат
и какой результат будет для нас хорошим?
;

****:<b>Attainable</b>
Достижимые цели.
Здесь мы проверяем, находятся ли наши цели в реальных пределах.
;

****:<b>Relevant</b>
Все задачи должны относиться к бизнесу
и должны вести к цели проекта
;

****:<b>Time-bound</b>
Обязательное ограничение во времени.
Большие задачи надо стараться разбить на более мелкие
;

***:<b>Проблема, которую надо решить</b>
Какую проблему заказчик пытается решить?
;

***:<b>Продуктовые требования</b>
Какие метрики будут оцениваться, 
какие показатели будут достигнуты в ходе решения задачи?
;

***:<b>Технологические требования</b>
Какие технологические требования 
и ограничения предъявляет заказчик к функционалу?
;

***:<b>User stories</b>
Какая функциональность ожидается?
- не являются детальным описанием требований (то-есть того, что система должна бы делать), 
а представляют собой скорее обсуждаемое представление намерения (нужно сделать что-то вроде этого).

- являются короткими и легко читаемыми, понятными разработчикам, заказчикам и пользователям.

- представляют собой небольшие инкременты ценной функциональности, 
которая может быть реализована в рамках нескольких дней или недель.

- относительно легко поддаются оценке, таким образом, усилия, 
необходимые для реализации, могут быть быстро определены.

- не занимают огромных, громоздких документов, а организованы в списки, 
которые легче упорядочить и переупорядочить по ходу поступления новой информации.

- не детализированы в самом начале проекта, 
а уже более детально разрабатываются «точно в срок», 
избегая таким образом слишком ранней определенности, задержек в разработке, 
нагромождения требований и чрезмерно ограниченной формулировки решения.

- требуют минимум или вовсе не требуют сопровождения 
и могут быть безопасно отменены после имплементации.
;

****:<b>Структура</b>
Текст самой US должен объяснять роль/действия пользователя в системе, 
его потребность и выгоду, которые пользователь получит после того как история случится.
;

****:<b>Пример</b>
Как, <роль>, я <что-то хочу получить>, <с такой-то целью>.

Важно:

- Есть одна Роль
- Есть одно действие
- Есть одна ценность/влияние
;

**** Критерии оценки <b>INVEST</b>
***** <b>Independent.</b> Меньше зависимостей — легче планировать
***** <b>Negotiable.</b> Детали появляются в ходе обсуждений команды разработки и заказчика
***** <b>Valuable.</b> Измеримая история — какие метрики изменились
***** <b>Estimable.</b> Большая или расплывчатая история — невозможно точно оценить трудозатраты
***** <b>Small.</b> Небольшая история разрабатывается в рамках недели
***** <b>Testable.</b> Простой критерий готовности

****:<b>Важно помнить</b>
- Лучше написать много историй поменьше, чем несколько громоздких.
- Каждая история в идеале должна быть написана избегая технического жаргона — чтобы суть была понятна и бизнесу и разработке.
- Истории должны быть написаны таким образом, чтобы их можно было протестировать.
- Тест-план должен быть написан до кода.
- Как можно дольше стоит избегать UI. История должна выполняться без привязки к конкретным элементам.
- Каждая история должна содержать оценку.
- История должна иметь концовку — т.е. приводить к конкретному результату.
- История должна помещаться в итерацию.
;

***:<b>Use cases</b>
Какой сценарий необходимо пройти, чтобы достичь цель?
;
**** Включают в себя
***** Кто пользуется системой
***** Что пользователь хочет сделать
***** Какая у пользователя цель
***** Шаги к достижению цели
***** Как система реагирует на действия пользователя
**** Не включают в себя
***** Реализацию на специфическом языке (терминология и т.п.)
***** Информацию про интерфейсы

****:<b>Из чего состоят</b>
В зависимости от глубины и сложности того, что вы хотите или должны достичь, 
UC описывают комбинацию следующих элементов
;
***** Актер — кто или что выполняет действие.
***** Предварительные условия — что должно быть/случиться до и после прохождения UC.
***** Триггер — какое-то событие, которое стало причиной запуска UC.
***** Главный успешный сценарий — прохождение UC по ожидаемому сценарию.
***** Альтернативный сценарий — вариации главного успешного сценария.\nПроисходит, когда что-то пошло не так на системном уровне.

****:<b>Как писать</b>
Для написания UC используются шаги
;
***** Определить кто будет пользоваться системой.
***** Выбрать одного пользователя.
***** Определить, что этот пользователь будет делать с системой. Каждое действие станет UC.
***** Для каждого UC определить курс событий, когда этот пользователь использует систему.
***** Опишите основной курс в описании для UC.\nОпишите его с точки зрения того, что делает пользователь и что система делает в ответ, о чем пользователь должен знать.
***** Когда базовый курс описан, рассмотрите альтернативные курсы и добавьте их, чтобы «расширить» UC.
***** Ищите общие черты среди UC. Объедините их как UC одного курса.
***** Повторить шаги с 2 по 7 для всех пользователей.

***:<b>Corner cases</b>
Для того чтобы избежать непредвиденных сценариев в работе фичи, 
необходимо описать все возможные CC.

Отвечает на вопрос "А что будет, если ...?"
;
**** Обязанности
***** Должны покрывать большинство вариантов
***** Должны указывать на причины возникновения вариантов
**** Описание
***** Определить, какие факторы влияют на фичу 
*****:Результат/сценарий при всевозможных комбинациях этих факторов.
Для этого целесообразно использовать таблицу, 
в которой на пересечении факторов будет описан результат/сценарий.
;

** <b>Как помочь новому стандарту прижиться</b>

***:<b>Первое.</b>
Объяснить команде боль.
Как известно, если вы указываете причину внедрения, конверсия увеличивается.
;

***:<b>Второе.</b>
Показать пример, поставить некоторое количество задач для начала по стандарту,
показать заказчикам, как это надо делать, как оно работает.
;

***:<b>Третье.</b>
При внедрении обязательно собрать обратную связь по стандарту.
Ответить на все вопросы, внести корректировки.
Тогда будет коллективный труд, порог вхождения ниже.
;

***:<b>Четвертое.</b>
Воспринимать все нововведения, как эксперимент.
Если он удался (были достигнуты цели), он приживется сам собой, так как мотивация у людей будет осознанной.
Если не удался, можно вернуться к прежнему состоянию.
;

***:<b>Пятое.</b>
Закрепить нововведения фактами в виде цифр — сравните с периодом до внедрения.
Производительность увеличилась на столько-то, количество ошибок упало на столько-то.
;
@endmindmap
